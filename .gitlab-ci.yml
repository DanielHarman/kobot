stages:
  - build
  - test
  - dockerbuild
  - deploy
  
build:
  stage: build
  tags:
    - shell
  script:
    - ./gradlew --build-cache assemble
  artifacts:
    paths:
      - build/libs

test:
  stage: test
  tags:
    - shell
  script: ./gradlew check --info

dockerbuild:
  stage: dockerbuild
  tags:
    - shell 
    - docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
  before_script:
    - "docker --version"
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA} --pull ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA}"
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"
    
# deploy:
#   stage: deploy
#   tags:
#     - ssh
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "master"'
#       when: always
#   variables:
#     GIT_STRATEGY: none
#   before_script:
#     - "docker --version"
#     - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
#     - "docker stack services kotlinBot"
#   script:
#     - "docker pull  ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
#     - "docker pull  ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA}"
#     - "docker service update --with-registry-auth --image ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHA} kotlinBot_bot"
#   after_script:
#     - "docker logout ${CI_REGISTRY}"
#   environment:
#     name: production

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v1.0.3
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev"'
      when: always
  script:
    - kubectl get pods -A
  tags:
    - kubernetes
  variables:
    GIT_STRATEGY: none
  environment:
    name: production
